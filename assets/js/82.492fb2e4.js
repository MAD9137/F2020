(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{508:function(e,t,i){"use strict";i.r(t);var o=i(53),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"hiding-keyboards-with-first-responders"}},[e._v("Hiding Keyboards with First-Responders")]),e._v(" "),i("p",[e._v("When a user clicks in a textField or textView, the iOS virtual keyboard will come up at the bottom of the screen.  In iOS development, there is no automatic functionality for hiding the keyboard — the keyboard view just sits there once it has been summoned.  The reason is that the developer must decide how, and when, to hide the keyboard.")]),e._v(" "),i("h2",{attrs:{id:"resigning-a-first-responder"}},[e._v("Resigning a First-Responder")]),e._v(" "),i("p",[e._v("The first option for hiding a textField's, or a textView's keyboard is to access that outlet's "),i("code",[e._v("resignFirstResponder()")]),e._v(" method which will dismiss the keyboard.  When the keyboard is currently shown on the screen (and currently won't go away) it is acting as your application's first responder.  A "),i("strong",[e._v("first responder")]),e._v(" is the current object in your app that is in focus and is receiving events.  You can set it so that a button—or even a click on the background of the view—calls that outlet's "),i("code",[e._v("resignFirstResponder()")]),e._v(" method, and the keyboard will then go away.")]),e._v(" "),i("p",[e._v("The "),i("code",[e._v("touchesBegan()")]),e._v(" method is built into the viewController class that fires when the user touches the background of the view, and you can put code in this method to hide the keyboard.")]),e._v(" "),i("p",[e._v("Another option to hide the keyboard when the user taps on the background is to call the "),i("code",[e._v("view.endEditing()")]),e._v(" method.  The "),i("code",[e._v("view.endEditing()")]),e._v(" method tells the view to hide the keyboard belonging to the text sub-view within that view.")]),e._v(" "),i("p",[e._v("To test this functionality add a textField, a textView, and a button to a view of an iOS application.")]),e._v(" "),i("p",[i("img",{attrs:{src:"/F2020/assets/img/KeyResponder_1.png",alt:"Dismiss Keyboard"}})]),e._v(" "),i("p",[e._v("Then, connect the textField and textView to outlets, and your button to an action in your viewController class.")]),e._v(" "),i("p",[i("img",{attrs:{src:"/F2020/assets/img/KeyResponder_2.png",alt:"Dismiss Keyboard"}})]),e._v(" "),i("p",[e._v("You can see below how to call the "),i("code",[e._v("view.endEditing(true)")]),e._v(" method in the "),i("code",[e._v("touchesBegan()")]),e._v(" method.  You can also see the "),i("code",[e._v("resignFirstResponder()")]),e._v(" function is called on both the textField and textView within the action attached to the button.")]),e._v(" "),i("p",[i("img",{attrs:{src:"/F2020/assets/img/KeyResponder_3.png",alt:"Dismiss Keyboard"}})]),e._v(" "),i("div",{staticClass:"custom-block warning"},[i("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),i("p",[e._v("The "),i("code",[e._v("touchesBegan()")]),e._v(" method is a function built in to the viewController class that is exicuted when the user begins to touch the view itself.  This does "),i("strong",[e._v("not")]),e._v(" get fired when a sub-view is touched like a button, label or textView.")])]),e._v(" "),i("p",[e._v("The following videos describe using resignFirstResponder, and endEditing to hide the keyboard:")]),e._v(" "),i("p",[i("a",{attrs:{href:"https://www.linkedin.com/learning/ios-12-development-essential-training-1-fundamentals-ui-and-architecture/first-responders?u=2199673",target:"_blank",rel:"noopener noreferrer"}},[e._v("iOS 12 Development Essential Training - First Responder "),i("Badge",{attrs:{text:"LinkedIn Learning"}}),i("OutboundLink")],1)]),e._v(" "),i("p",[i("RouterLink",{attrs:{to:"/modules/week4/#during-class"}},[e._v("Back to Week 4")])],1)])}),[],!1,null,null,null);t.default=n.exports}}]);