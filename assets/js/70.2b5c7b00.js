(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{499:function(e,a,s){"use strict";s.r(a);var t=s(53),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"swift-types"}},[e._v("Swift Types")]),e._v(" "),s("p",[e._v("In Swift there are two main categories of data types: value types and reference types.")]),e._v(" "),s("h2",{attrs:{id:"value-types-and-reference-types"}},[e._v("Value types and Reference types")]),e._v(" "),s("p",[s("strong",[e._v("Value types")]),e._v(" are the predefined data structures provided by the language like ints, floats, chars, strings, bools, structs, arrays, dictionaries, tuples, enumerators and optionals. "),s("strong",[e._v("Reference types")]),e._v(" include classes, functions and function closures.")]),e._v(" "),s("p",[e._v("The main difference between value and reference data types is the way they are passed around in memory. When a value type is passed in to a function as a parameter, it is actually duplicated in memory and the duplicate is what is manipulated within the function; when the function ends, the copy is deleted. Reference types are handled differently, and pass a reference (pointer to the original object) around directly. "),s("em",[e._v("This means the original object passed in to a function is changed when the function manipulates the passed-in value.")])]),e._v(" "),s("h2",{attrs:{id:"types"}},[e._v("Types")]),e._v(" "),s("p",[e._v("Data types are the building blocks of programming languages and Swift has all the common types one expects to see in a modern language; however, Swift was created in part to get away from its more complex C-style predecessors to make writing applications faster, easier and in a more expressive way. For instance, characters in Swift are stored as a set of unicode scalar values called "),s("strong",[e._v("Extended Grapheme Clusters")]),e._v(".")]),e._v(" "),s("p",[e._v('For an example of this, the unicode character for the letter “a” is "\\u{61}” and can be combined into a scalar value like "\\u{61}\\u{302}" to give the character “â”. The root \\u{61} and modifier \\u{302} are combined to represent a single character—this differs from C with its ASCII character set—which leads to some interesting and expressive code.\n\x3c!-- The following videos outline the similarities and differences between Objective-C and Swift data types, how Swift types are created and how they are accessed.')]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.linkedin.com/learning/swift-5-essential-training/type-safety-and-inference?u=2199673",target:"_blank",rel:"noopener noreferrer"}},[e._v("Type safety and inference "),s("Badge",{attrs:{text:"Linkedin Learning"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.linkedin.com/learning/swift-5-essential-training/swift-operators?u=2199673",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift operators "),s("Badge",{attrs:{text:"Linkedin Learning"}}),s("OutboundLink")],1),e._v(" --\x3e")]),e._v(" "),s("h3",{attrs:{id:"strings"}},[e._v("Strings")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("String")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string 1"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a string explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondString "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string 2"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//inferred declaration")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"characters"}},[e._v("Characters")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstChar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Character")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"A"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a character explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondChar "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"B"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//WARNING: inferred declaration defaults to string")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"integers"}},[e._v("Integers")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a integer explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondInt "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//inferred declaration")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"floating-points"}},[e._v("Floating Points")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstDouble"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Double")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.234")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a double explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondDouble "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.14159265359")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//inferred declaration")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstFloat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Float")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5.678")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a float explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondFloat "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.1415")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//WARNING: all inferred floats are interpreted as doubles")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[s("strong",[e._v("NOTE:")]),e._v(" The compiler infers all floating point values as doubles unless explicitly declared as a float.")]),e._v(" "),s("h3",{attrs:{id:"booleans"}},[e._v("Booleans")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstBool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Bool")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//assign a bool explicitly")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" secondBool "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//inferred declaration")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"numeric-literal-expressions"}},[e._v("Numeric Literal Expressions")]),e._v(" "),s("p",[e._v("We have seen how to create and set whole and floating point numbers like:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("and")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Float")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("211.5")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("...but if you had an integer variable representing a colour, it may be more advantageous to set it with a hexadecimal value. Setting an integer with a hexadecimal numeric literal value can be done like this:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" colorHex "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0xFF")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Setting an integer with a binary numeric literal value can be done like this:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" colorBin "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0b11111111")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Setting an integer with a octal numeric literal value can be done like this:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" colorOct "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0o377")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),e._v(" "),s("h3",{attrs:{id:"variable-creation-and-deferred-value-assignment"}},[e._v("Variable creation and deferred value assignment")]),e._v(" "),s("p",[e._v("As you have seen, in Swift the keywords var and let can be used when creating a new variable. The variable's type can be set through inference (like in JavaScript) when you set a value to that variable.")]),e._v(" "),s("p",[e._v("You can make a new integer variable called 'users' like this:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" users "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("88")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("As you have seen, this is inferring the type (an Int) based on the value it is being set to.")]),e._v(" "),s("p",[e._v("Languages that only use inference are called "),s("strong",[e._v("loosely-typed languages")]),e._v(". Swift is, in fact, a "),s("strong",[e._v("strongly-typed language")]),e._v(", meaning the variable's type "),s("em",[e._v("must")]),e._v(" be chosen when you create it.")]),e._v(" "),s("p",[e._v('The example "var users = 88" is actually considered a '),s("strong",[e._v("short-hand form")]),e._v(" for the explicit version of the same declaration, which looks like:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" users"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("88")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Using the short-hand can "),s("strong",[e._v("only")]),e._v(" be used when initially assigning a value to your variable as you create it.")]),e._v(" "),s("p",[e._v("If you wanted to create a new variable but don't want to assign a value to it, you must assign the type like:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" users"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("The following shows you examples of the different ways you can define a variable:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" firstString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("String")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//deferred declaration of a string")]),e._v("\nfirstString "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string 1"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//deferred value assignment")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" secondString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("String")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//deferred declaration of a constant string")]),e._v("\nsecondString "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string 2"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//deferred constant value assignment")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("The following videos descibe the basics of creating variables in Swift:")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=3ea8a4be-3d91-4c9b-8db0-6d7148a59bcb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift Fundamentals - Understanding Variables in Swift "),s("Badge",{attrs:{text:"Pluralsight"}}),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"mutability-with-var-and-let"}},[e._v("Mutability with "),s("code",[e._v("var")]),e._v(" and "),s("code",[e._v("let")])]),e._v(" "),s("p",[e._v("So far in Swift you have seen how to create variables with the keyword "),s("strong",[e._v("var")]),e._v(" like this:")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("...but what if you wanted to to create an immutable piece of data, like a const in JavaScript?")]),e._v(" "),s("p",[e._v("Using the keyword "),s("strong",[e._v("let")]),e._v(" instead of var creates your variable with read-only access; once an initial value is set can not be changed. The following shows you an example of how to define a constant integer using let.")]),e._v(" "),s("div",{staticClass:"language-swift line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("Int")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("The next videos descibes constant variables, and why they are commonly used:")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=7f7c8849-ac71-4eba-8765-2b9bc81700da",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift Fundamentals - Constants: Why They're Important "),s("Badge",{attrs:{text:"Pluralsight"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=8d583eb8-8b34-4e66-8c58-8808d4fb1d94",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift Fundamentals - Introducing Operators "),s("Badge",{attrs:{text:"Pluralsight"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=fa0d36ca-04a5-4b4a-b12a-66afe5c71b11",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift Fundamentals - Converting in Swift: When It Happens (And When it Doesn't)"),s("Badge",{attrs:{text:"Pluralsight"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=e7b55ce2-2ab2-440d-bc00-8a1d5c5fed47",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift Fundamentals - Making Conversion Happen "),s("Badge",{attrs:{text:"Pluralsight"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("For more information about Swift variables you can look at the Apple documentation here:")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://developer.apple.com/documentation/swift/swift_standard_library",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apple Developer Docs - Swift Standard Library"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("RouterLink",{attrs:{to:"/modules/week2/#during-class"}},[e._v("Back to Week 2")])],1)])}),[],!1,null,null,null);a.default=n.exports}}]);